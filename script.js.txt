// script.js
document.addEventListener('DOMContentLoaded', function() {
    const data = [
        { year: 2012, model: "AlexNet", compute: 0.0000012, color: "#74b9ff" },
        { year: 2015, model: "ResNet", compute: 0.000036, color: "#0984e3" },
        { year: 2017, model: "Transformer", compute: 0.000300, color: "#6c5ce7" },
        { year: 2018, model: "BERT", compute: 0.000512, color: "#a29bfe" },
        { year: 2019, model: "GPT-2", compute: 0.042000, color: "#fd79a8" },
        { year: 2020, model: "GPT-3", compute: 3.640000, color: "#e84393" },
        { year: 2022, model: "PaLM", compute: 2.500000, color: "#e17055" },
        { year: 2023, model: "GPT-4", compute: 8.000000, color: "#d63031" }
    ];

    function createVisualization() {
        // Clear any existing SVG
        d3.select("#visualization svg").remove();

        const width = Math.min(1000, window.innerWidth - 40);
        const height = 600;
        const margin = { top: 50, right: 50, bottom: 50, left: 80 };

        const svg = d3.select("#visualization")
            .append("svg")
            .attr("width", width)
            .attr("height", height);

        const x = d3.scaleLinear()
            .domain([2012, 2023])
            .range([margin.left, width - margin.right]);

        const y = d3.scaleLog()
            .domain([1e-7, 10])
            .range([height - margin.bottom, margin.top]);

        // Add X axis
        svg.append("g")
            .attr("transform", `translate(0,${height - margin.bottom})`)
            .call(d3.axisBottom(x).tickFormat(d3.format("d")));

        // Add Y axis
        svg.append("g")
            .attr("transform", `translate(${margin.left},0)`)
            .call(d3.axisLeft(y).tickFormat(d3.format(".0e")));

        // Add labels
        svg.append("text")
            .attr("class", "x-label")
            .attr("text-anchor", "middle")
            .attr("x", width/2)
            .attr("y", height - 10)
            .text("Year");

        svg.append("text")
            .attr("class", "y-label")
            .attr("text-anchor", "middle")
            .attr("transform", "rotate(-90)")
            .attr("x", -height/2)
            .attr("y", 20)
            .text("Compute (petaflop/s-days)");

        // Add tooltip div if it doesn't exist
        if (!d3.select("body").select(".tooltip").size()) {
            d3.select("body").append("div")
                .attr("class", "tooltip")
                .style("opacity", 0)
                .style("position", "absolute")
                .style("background-color", "white")
                .style("border", "1px solid #ddd")
                .style("padding", "10px")
                .style("border-radius", "5px");
        }

        // Add bubbles with initial radius of 0
        const bubbles = svg.selectAll("circle")
            .data(data)
            .enter()
            .append("circle")
            .attr("class", "bubble")
            .attr("cx", d => x(d.year))
            .attr("cy", d => y(d.compute))
            .attr("r", 0)
            .attr("fill", d => d.color);

        // Add hover effects
        bubbles.on("mouseover", function(event, d) {
            d3.select(this)
                .transition()
                .duration(200)
                .attr("r", d => Math.sqrt(d.compute) * 20 + 10);

            d3.select(".tooltip")
                .transition()
                .duration(200)
                .style("opacity", .9);
            
            d3.select(".tooltip")
                .html(`<strong>${d.model}</strong><br/>Compute: ${d.compute} petaflop/s-days`)
                .style("left", (event.pageX + 10) + "px")
                .style("top", (event.pageY - 28) + "px");
        })
        .on("mouseout", function(event, d) {
            d3.select(this)
                .transition()
                .duration(200)
                .attr("r", d => Math.sqrt(d.compute) * 20);

            d3.select(".tooltip")
                .transition()
                .duration(500)
                .style("opacity", 0);
        });

        // Function to animate bubbles
        function animateBubbles() {
            bubbles.transition()
                .duration(1000)
                .attr("r", d => Math.sqrt(d.compute) * 20);
        }

        // Add click handler to button
        const playButton = document.getElementById("playButton");
        if (playButton) {
            playButton.onclick = animateBubbles;
        }

        // Initial animation
        setTimeout(animateBubbles, 500);
    }

    // Create visualization when page loads
    createVisualization();

    // Resize handler
    window.addEventListener('resize', createVisualization);
});